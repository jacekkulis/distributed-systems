//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.IntercityService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IntercityConnection", Namespace="http://schemas.datacontract.org/2004/07/Intercity")]
    [System.SerializableAttribute()]
    public partial class IntercityConnection : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan arrivalTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.IntercityService.City begginingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan departureTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.IntercityService.City destinationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan arrivalTime {
            get {
                return this.arrivalTimeField;
            }
            set {
                if ((this.arrivalTimeField.Equals(value) != true)) {
                    this.arrivalTimeField = value;
                    this.RaisePropertyChanged("arrivalTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.IntercityService.City beggining {
            get {
                return this.begginingField;
            }
            set {
                if ((object.ReferenceEquals(this.begginingField, value) != true)) {
                    this.begginingField = value;
                    this.RaisePropertyChanged("beggining");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan departureTime {
            get {
                return this.departureTimeField;
            }
            set {
                if ((this.departureTimeField.Equals(value) != true)) {
                    this.departureTimeField = value;
                    this.RaisePropertyChanged("departureTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.IntercityService.City destination {
            get {
                return this.destinationField;
            }
            set {
                if ((object.ReferenceEquals(this.destinationField, value) != true)) {
                    this.destinationField = value;
                    this.RaisePropertyChanged("destination");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="City", Namespace="http://schemas.datacontract.org/2004/07/Intercity.Model")]
    [System.SerializableAttribute()]
    public partial class City : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cityNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cityName {
            get {
                return this.cityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.cityNameField, value) != true)) {
                    this.cityNameField = value;
                    this.RaisePropertyChanged("cityName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CityDoesntExistException", Namespace="http://schemas.datacontract.org/2004/07/Intercity.Exception")]
    [System.SerializableAttribute()]
    public partial class CityDoesntExistException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IntercityService.IIntercityService")]
    public interface IIntercityService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIntercityService/FindDirectTrain", ReplyAction="http://tempuri.org/IIntercityService/FindDirectTrainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.IntercityService.CityDoesntExistException), Action="http://tempuri.org/IIntercityService/FindDirectTrainCityDoesntExistExceptionFault" +
            "", Name="CityDoesntExistException", Namespace="http://schemas.datacontract.org/2004/07/Intercity.Exception")]
        System.Collections.Generic.List<Client.IntercityService.IntercityConnection> FindDirectTrain(string cityNameA, string cityNameB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIntercityService/FindDirectTrain", ReplyAction="http://tempuri.org/IIntercityService/FindDirectTrainResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.IntercityService.IntercityConnection>> FindDirectTrainAsync(string cityNameA, string cityNameB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIntercityService/FindTrain", ReplyAction="http://tempuri.org/IIntercityService/FindTrainResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.IntercityService.CityDoesntExistException), Action="http://tempuri.org/IIntercityService/FindTrainCityDoesntExistExceptionFault", Name="CityDoesntExistException", Namespace="http://schemas.datacontract.org/2004/07/Intercity.Exception")]
        System.Collections.Generic.List<Client.IntercityService.IntercityConnection> FindTrain(string cityNameA, string cityNameB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIntercityService/FindTrain", ReplyAction="http://tempuri.org/IIntercityService/FindTrainResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.IntercityService.IntercityConnection>> FindTrainAsync(string cityNameA, string cityNameB);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIntercityServiceChannel : Client.IntercityService.IIntercityService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IntercityServiceClient : System.ServiceModel.ClientBase<Client.IntercityService.IIntercityService>, Client.IntercityService.IIntercityService {
        
        public IntercityServiceClient() {
        }
        
        public IntercityServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IntercityServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IntercityServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IntercityServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Client.IntercityService.IntercityConnection> FindDirectTrain(string cityNameA, string cityNameB) {
            return base.Channel.FindDirectTrain(cityNameA, cityNameB);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.IntercityService.IntercityConnection>> FindDirectTrainAsync(string cityNameA, string cityNameB) {
            return base.Channel.FindDirectTrainAsync(cityNameA, cityNameB);
        }
        
        public System.Collections.Generic.List<Client.IntercityService.IntercityConnection> FindTrain(string cityNameA, string cityNameB) {
            return base.Channel.FindTrain(cityNameA, cityNameB);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.IntercityService.IntercityConnection>> FindTrainAsync(string cityNameA, string cityNameB) {
            return base.Channel.FindTrainAsync(cityNameA, cityNameB);
        }
    }
}
